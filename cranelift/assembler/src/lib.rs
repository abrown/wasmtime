#![allow(non_camel_case_types)]

mod alloc;
pub mod fuzz;
mod imm;
mod mem;
mod reg;
mod rex;
mod sink;

pub use alloc::RegallocVisitor;
pub use imm::{Extension, Imm16, Imm32, Imm8, Simm32};
pub use mem::{Amode, GprMem, Scale, XmmMem};
pub use reg::{Gpr, Gpr2MinusRsp, Size, Xmm};
pub use rex::RexFlags;
pub use sink::{CodeSink, KnownOffsetTable, Label, TrapCode};

// Include code generated by the `meta` crate.
use mem::emit_modrm_sib_disp;
use rex::emit_simm;
include!(concat!(env!("OUT_DIR"), "/assembler.rs"));

/// Helper function to make code generation simpler.
fn emit_modrm(buffer: &mut impl CodeSink, enc_reg_g: u8, rm_e: u8) {
    let modrm = rex::encode_modrm(0b11, enc_reg_g & 7, rm_e & 7);
    buffer.put1(modrm);
}
